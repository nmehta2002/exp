@startuml

class LQRequest
{
    
}

class LQResult
{

}

class LQMgr
{
    + LQMgr(shared<LQRunner> dispatcher,
            shared_ptr<LQTimeStampKeeper> timeStampKeeper,
            shared_ptr<LQHttpEngine> httpEngine,
            shared_ptr<LQRunner> lqRunner)
    ..
    //
    // Notifies the LQMgr, about a hint received from the backend.
    // Expects the LQMgr to start the process of getting and running
    // the live queries.
    //
    +void Notify()
    ==
    ..
    //
    // Get the current time stamp to use in check-in message.
    //
    +Timestamp GetCurrentTimeStamp()
    ==
    ..
    //
    // Implementation of LQHttpEngineListener
    //
    +void NewQueries(vector<shared_ptr<LQRequest>> lqRequests) overrides

    +void ResultSent(shared_ptr<LQResult> lqResult)

    ==
    ..
    //
    // Implementation of LQRunnerListener
    //

    +void CompletedQuery(shared_ptr<LQRequest> lqRequest,
                         shared_ptr<LQResult>  lqResult) overrides
    ==

    +void Shutdown()
}


class LQTimeStampKeeper
{
    +void ProcessedQuery(shared_ptr<LQRequest> lqRequest)

    +void NewQueries(vector<shared_ptr<LQRequest>> lqRequests)

    +Timestamp GetCurrentTimeStamp()
}

interface LQRunnerEventListener
{
    +void CompletedQuery(shared_ptr<LQRequest> lqRequest,
                    shared_ptr<LQResult>  lqResult)
}


class LQRequestGetter
{
    +LQRequestGetter(shared_ptr<LQRequestGetterListener> fetchListener)

    +void Get(TimeStamp createdAfter)

    -- private data --
     - TimeStamp newestKnownQuery
}


class LQRunner
{
    ..
    //
    // Register a listener to listen on LQRequest completion events.
    //
    +LQRunner(shared_ptr<LQRunnerEventListener> listener)
    ==

    +void Enqueue(shared_ptr<LQRequest> lqRequest)

    ..
    //
    // Cancel queries already scheduled with the Runner.
    // A call to this routine does not gurantee that the query will be cancelled,
    // the query will not be cancelled if its already running.
    //
    +void Cancel(shared_ptr<LQRequest> LQRequest)
    ==

    +void Shutdown()
}

interface LQHttpEngineListener
{
    +void NewQueries(vector<shared_ptr<LQRequest>> lqRequests)

    +void ResultSent(shared_ptr<LQResult> lqResult)
}

class LQHttpEngine
{
    ..
    //
    // Register a listener to listen on engine events.
    //
    +LQHttpEngine(shared_ptr<LQHttpEngineListener> listener)
    ==

    ..
    //
    // Queues a get request.
    //
    +void EnqueueGetRequest(Timestamp createdAfter)
    ==

    ..
    //
    // Queues a send result.
    //
    +void EnqueueSendResult(shared_ptr<LQResult> lqResult)
    ==

}

class LQResultSender
{
    +void Send(shared_ptr<LQResult> lqResult)
}

interface Subscriber
{
    +void Notify(event_type, event);
}

LQHttpEngineListener <|-- LQMgr
LQRunnerEventListener <|-- LQMgr
Subscriber <|-- LQMgr

LQMgr o-- LQTimeStampKeeper
LQMgr o-- LQRunner
LQHttpEngine o-- LQRequestGetter
LQHttpEngine o-- LQResultSender


@enduml