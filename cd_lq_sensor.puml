@startuml

class LQRequest
{
    
}

class LQResult
{

}

class LQMgr
{
    ..
    //
    // Notifies the LQMgr, about a hint received from the backend.
    // Expects the LQMgr to start the process of getting and running
    // the live queries.
    //
    +void Notify()
    ==
    ..
    //
    // Get the current time stamp to use in check-in message.
    //
    +Timestamp GetCurrentTimeStamp()
    ==

    +void Shutdown()
}


class LQTimeStampKeeper
{
    +void ProcessedQuery(shared_ptr<LQResult> lqResult)

    +void UpdateKeeperNewRequestTimeStamp(vector<shared_ptr<LQRequest>> lqRequests)

    +Timestamp GetCurrentTimeStamp()
}


class LQRequestGetter
{
    +vector<shared_ptr<LQRequest>> Get(TimeStamp createdAfter)

    -- private data --
     - TimeStamp newestKnownQuery
}


class LQRunner
{
    +void Run(shared_ptr<LQRequest> lqRequest)
}

class LQHttpEngine
{
    +vector<shared_ptr<LQRequest>> GetRequest(Timestamp createdAfter)

    +void SendResult(shared_ptr<LQResult> lqResult)
}

class LQResultSender
{
    +void Send(shared_ptr<LQResult> lqResult)
}

interface Subscriber
{
    +void Notify(event_type, event);
}


Subscriber <|-- LQMgr

LQMgr o-- LQTimeStampKeeper
LQMgr o-- LQRunner
LQHttpEngine o-- LQRequestGetter
LQHttpEngine o-- LQResultSender


@enduml